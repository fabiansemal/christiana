# -*- encoding: utf-8 -*-

from mx import DateTime
import time

from openerp.osv import fields, osv
import openerp.addons.decimal_precision as dp
from openerp.tools.translate import _

class purchase_order_line(osv.osv):
    _inherit = "purchase.order.line"

    def onchange_supp(self, cr, uid, ids, supplier_qty, conversion_coeff, supplier_price_unit):
        res = {}
        if conversion_coeff > 0:
            res['product_qty'] = supplier_qty * conversion_coeff
            res['price_unit'] = round((round(supplier_price_unit, 2) / round(conversion_coeff, 2)), 2)
       
        return {'value':res}

    def onchange_price(self, cr, uid, ids, conversion_coeff, supplier_price_unit):
        res = {}
        if conversion_coeff > 0:
	    if supplier_price_unit > 0:
                cur_obj = self.pool.get('res.currency')
                res['price_unit'] = round((round(supplier_price_unit, 2) / round(conversion_coeff, 2)), 2)
        
        return {'value':res}

    def _amount_line(self, cr, uid, ids, prop, unknow_none,unknow_dict):
        res = {}
        cur_obj = self.pool.get('res.currency')
        for line in self.browse(cr, uid, ids):
            cur = line.order_id.pricelist_id.currency_id
            res[line.id] = cur_obj.round(cr, uid, cur, (line.price_unit * line.product_qty * (1 - (line.discount or 0.0) /100.0)) ) + line.setup_cost
        return res

    _columns = {
        'supplier_qty': fields.float('Supplier Qty'),
	'supplier_uom_id':fields.many2one('product.uom', 'Supplier UoM', select=True),
        'conversion_coeff': fields.float('Conversion Coeff'),
        'supplier_price_unit': fields.float('Supplier Unit Price'),
        'discount': fields.float('Discount %'),
        'price_subtotal': fields.function(_amount_line, method=True, string='Subtotal'),
        'setup_cost': fields.float('Setup Cost'),
    }

purchase_order_line()

class purchase_order(osv.osv):
    _inherit = "purchase.order"
    
    def _amount_all(self, cr, uid, ids, field_name, arg, context):
        res = {}
        cur_obj = self.pool.get('res.currency')
        for order in self.browse(cr, uid, ids):
            res[order.id] = {
                'amount_untaxed': 0.0,
                'amount_tax': 0.0,
                'amount_total': 0.0,
            }
            val = val1 = 0.0
            cur = order.pricelist_id.currency_id
            for line in order.order_line:
                for c in self.pool.get('account.tax').compute_all(cr, uid, line.taxes_id, round(line.price_unit * (1-(line.discount or 0.0)/100.0), 2), line.product_qty, line.product_id, order.partner_id)['taxes']:
                    val += c['amount']
                val1 += line.price_subtotal
            res[order.id]['amount_tax'] = cur_obj.round(cr, uid, cur, val)
            res[order.id]['amount_untaxed'] = cur_obj.round(cr, uid, cur, val1)
            res[order.id]['amount_total'] = res[order.id]['amount_untaxed'] + res[order.id]['amount_tax']
        return res

    def _get_order(self, cr, uid, ids, context=None):
        result = {}
        for line in self.pool.get('purchase.order.line').browse(cr, uid, ids, context=context):
            result[line.order_id.id] = True
        return result.keys()

    _columns = {
        'amount_untaxed': fields.function(_amount_all, digits_compute= dp.get_precision('Purchase Price'), string='Untaxed Amount',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums", help="The amount without tax"),
        'amount_tax': fields.function(_amount_all, digits_compute= dp.get_precision('Purchase Price'), string='Taxes',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums", help="The tax amount"),
        'amount_total': fields.function(_amount_all, digits_compute= dp.get_precision('Purchase Price'), string='Total',
            store={
                'purchase.order.line': (_get_order, None, 10),
            }, multi="sums",help="The total amount"),
        'min_order_amount': fields.related('partner_id', 'min_order_amount', type='float', relation='res.partner', string='Minimum Order Amount', readonly=True),
        'supplier_notes': fields.related('partner_id', 'comment', type='char', relation='res.partner', string='Supplier Notes', readonly=True),
        'accept_amount': fields.boolean('Accept PO Amount'),
    }

    def wkf_confirm_order(self, cr, uid, ids, context=None):
        for po in self.browse(cr, uid, ids, context=context):
            if not po.accept_amount:
		if po.min_order_amount > po.amount_total: 
                    raise osv.except_osv(_('Warning !'), _('You cannot confirm a purchase order with a total amount below the minimum order amount, unless you accept the order amount.'))

        return super(purchase_order,self).wkf_confirm_order(cr, uid, ids, context=None)

#    def _prepare_inv_line(self, cr, uid, account_id, order_line, context=None):
#        """Collects require data from purchase order line that is used to create invoice line
#        for that purchase order line
#        :param account_id: Expense account of the product of PO line if any.
#        :param browse_record order_line: Purchase order line browse record
#        :return: Value for fields of invoice lines.
#        :rtype: dict
#        """
#        print'DISCOUNTED AMOUNT:', round(order_line.price_unit * (1-(order_line.discount or 0.0)/100.0), 2) or 0.0
#        return {
#            'name': order_line.name,
#            'account_id': account_id,
#            'price_unit': round(order_line.price_unit * (1-(order_line.discount or 0.0)/100.0), 2) or 0.0,
#            'quantity': order_line.product_qty,
#            'product_id': order_line.product_id.id or False,
#            'uos_id': order_line.product_uom.id or False,
#            'invoice_line_tax_id': [(6, 0, [x.id for x in order_line.taxes_id])],
#            'account_analytic_id': order_line.account_analytic_id.id or False,
#        }

purchase_order()

#class stock_picking(osv.osv):
#    _inherit =  'stock.picking'
#
#    def _invoice_line_hook(self, cr, uid, move_line, invoice_line_id):
#        if move_line.purchase_line_id:
#            self.pool.get('account.invoice.line').write( cr, uid, [invoice_line_id], {
#                'discount':move_line.purchase_line_id.discount,
#                } )
#        return super( stock_picking, self)._invoice_line_hook( cr, uid, move_line,invoice_line_id )
#
#stock_picking()

class res_partner(osv.osv):
    _inherit = 'res.partner'

    _columns = {
        'min_order_amount': fields.float('Minimum Order Amount'),
        'default_purch_currency': fields.related('property_product_pricelist_purchase', 'currency_id', type='many2one', relation='res.currency', string='Default Purch. Currency', readonly=True),
    }

res_partner()

### FOLLOWING LINES COPIES FROM PURCHASE_LINE_INVOICE.PY (FROM WIZARD)
### TO BE KEPT IN SYNC WITH STANDARD SOURCE CODE EXCEPT OF CALCULATION OF PRICE UNIT

class purchase_line_invoice(osv.osv_memory):

    """ To create invoice for purchase order line"""

    _name = 'purchase.order.line_invoice'
    _description = 'Purchase Order Line Make Invoice'

    def makeInvoices(self, cr, uid, ids, context=None):

        """
             To get Purchase Order line and create Invoice
             @param self: The object pointer.
             @param cr: A database cursor
             @param uid: ID of the user currently logged in
             @param context: A standard dictionary
             @return : retrun view of Invoice
        """

        if context is None:
            context={}

        record_ids =  context.get('active_ids',[])
        if record_ids:
            res = False
            invoices = {}
            invoice_obj=self.pool.get('account.invoice')
            purchase_line_obj=self.pool.get('purchase.order.line')
            property_obj=self.pool.get('ir.property')
            account_fiscal_obj=self.pool.get('account.fiscal.position')
            invoice_line_obj=self.pool.get('account.invoice.line')
            account_jrnl_obj=self.pool.get('account.journal')

            def multiple_order_invoice_notes(orders):
                notes = ""
                for order in orders:
                    notes += "%s \n" % order.notes
                return notes



            def make_invoice_by_partner(partner, orders, lines_ids):
                """
                    create a new invoice for one supplier
                    @param partner : The object partner
                    @param orders : The set of orders to add in the invoice
                    @param lines : The list of line's id
                """
                name = orders and orders[0].name or ''
                journal_id = account_jrnl_obj.search(cr, uid, [('type', '=', 'purchase')], context=None)
                journal_id = journal_id and journal_id[0] or False
                a = partner.property_account_payable.id
                inv = {
                    'name': name,
                    'origin': name,
                    'type': 'in_invoice',
                    'journal_id':journal_id,
                    'reference' : partner.ref,
                    'account_id': a,
                    'partner_id': partner.id,
                    'invoice_line': [(6,0,lines_ids)],
                    'currency_id' : orders[0].pricelist_id.currency_id.id,
                    'comment': multiple_order_invoice_notes(orders),
                    'payment_term': orders[0].payment_term_id.id,
                    'fiscal_position': partner.property_account_position.id
                }
                inv_id = invoice_obj.create(cr, uid, inv)
                for order in orders:
                    order.write({'invoice_ids': [(4, inv_id)]})
                return inv_id

            for line in purchase_line_obj.browse(cr,uid,record_ids):
                if (not line.invoiced) and (line.state not in ('draft','cancel')):
                    if not line.partner_id.id in invoices:
                        invoices[line.partner_id.id] = []
                    if line.product_id:
                        a = line.product_id.property_account_expense.id
                        if not a:
                            a = line.product_id.categ_id.property_account_expense_categ.id
                        if not a:
                            raise osv.except_osv(_('Error!'),
                                    _('Define expense account for this product: "%s" (id:%d).') % \
                                            (line.product_id.name, line.product_id.id,))
                    else:
                        a = property_obj.get(cr, uid,
                                'property_account_expense_categ', 'product.category',
                                context=context).id
                    fpos = line.order_id.fiscal_position or False
                    a = account_fiscal_obj.map_account(cr, uid, fpos, a)
                    inv_id = invoice_line_obj.create(cr, uid, {
                        'name': line.name,
                        'origin': line.order_id.name,
                        'account_id': a,
                        'price_unit': round(line.price_unit * (1-(line.discount or 0.0)/100.0), 2) or 0.0,
                        'setup_cost': line.setup_cost,
                        'quantity': line.product_qty,
                        'uos_id': line.product_uom.id,
                        'product_id': line.product_id.id or False,
                        'invoice_line_tax_id': [(6, 0, [x.id for x in line.taxes_id])],
                        'account_analytic_id': line.account_analytic_id and line.account_analytic_id.id or False,
                    })
                    purchase_line_obj.write(cr, uid, [line.id], {'invoiced': True, 'invoice_lines': [(4, inv_id)]})
                    invoices[line.partner_id.id].append((line,inv_id))

            res = []
            for result in invoices.values():
                il = map(lambda x: x[1], result)
                orders = list(set(map(lambda x : x[0].order_id, result)))

                res.append(make_invoice_by_partner(orders[0].partner_id, orders, il))

        return {
            'domain': "[('id','in', ["+','.join(map(str,res))+"])]",
            'name': _('Supplier Invoices'),
            'view_type': 'form',
            'view_mode': 'tree,form',
            'res_model': 'account.invoice',
            'view_id': False,
            'context': "{'type':'in_invoice', 'journal_type': 'purchase'}",
            'type': 'ir.actions.act_window'
        }
purchase_line_invoice()

class account_invoice_line(osv.osv):
    _inherit = 'account.invoice.line'

    def _amount_line(self, cr, uid, ids, prop, unknow_none,unknow_dict):
        res = {}
        cur_obj = self.pool.get('res.currency')
        for line in self.browse(cr, uid, ids):
            cur = line.invoice_id.currency_id
            res[line.id] = cur_obj.round(cr, uid, cur, (line.price_unit * line.quantity)) + line.setup_cost
        return res

    _columns = {
        'price_subtotal': fields.function(_amount_line, method=True, string='Subtotal'),
        'setup_cost': fields.float('Setup Cost'),
    }

account_invoice_line()

class account_invoice(osv.osv):
    _inherit = 'account.invoice'

    def _amount_all(self, cr, uid, ids, field_name, arg, context):
        res = {}
        cur_obj = self.pool.get('res.currency')
        for order in self.browse(cr, uid, ids):
            res[order.id] = {
                'amount_untaxed': 0.0,
                'amount_tax': 0.0,
                'amount_total': 0.0,
            }
            val = val1 = 0.0
            cur = order.currency_id
            for line in order.order_line:
                for c in self.pool.get('account.tax').compute_all(cr, uid, line.taxes_id, line.price_unit, line.quantity, line.product_id, order.partner_id)['taxes']:
                    val += c['amount']
                val1 += line.price_subtotal
            res[order.id]['amount_tax'] = cur_obj.round(cr, uid, cur, val)
            res[order.id]['amount_untaxed'] = cur_obj.round(cr, uid, cur, val1)
            res[order.id]['amount_total'] = res[order.id]['amount_untaxed'] + res[order.id]['amount_tax']
        return res

account_invoice()

